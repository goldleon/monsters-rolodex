{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","alt","srcSet","name","email","CardList","monsters","map","key","SearchBox","placeholder","onChangeHandler","type","onChange","e","App","state","searchField","handleChange","setState","target","value","fetch","then","response","json","users","catch","error","console","log","message","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yVAmBeA,G,YAdF,SAAAC,GACX,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,aACHC,IAAI,UACJC,OAAM,+BAA0BN,EAAMG,QAAQC,GAAxC,eAER,4BAAKJ,EAAMG,QAAQI,MACnB,2BAAIP,EAAMG,QAAQK,UCITC,G,MAVE,SAAAT,GACf,OACE,yBAAKC,UAAU,aACZD,EAAMU,SAASC,IAAI,SAAAR,GAAO,OACzB,kBAAC,EAAD,CAAMA,QAASA,EAASS,IAAKT,EAAQC,UCI9BS,G,MAXG,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,gBAChC,OACE,2BACEd,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAU,SAAAC,GAAC,OAAIH,EAAgBG,QC6BtBC,E,2MA9BbC,MAAQ,CACNV,SAAU,GACVW,YAAa,I,EAUfC,aAAe,SAACJ,GAAQ,EAAKK,SAAS,CAAEF,YAAaH,EAAEM,OAAOC,S,mFAPzC,IAAD,OAClBC,MAAM,8CAA8CC,KAAK,SAAAC,GACvD,OAAOA,EAASC,SAEfF,KAAK,SAAAG,GAAK,OAAI,EAAKP,SAAS,CAAEb,SAAUoB,MAAUC,MAAM,SAAAC,GAAWC,QAAQC,IAAIF,EAAMG,a,+BAKhF,IAAD,SAC2BC,KAAKhB,MAA/BV,EADD,EACCA,SAAUW,EADX,EACWA,YACZgB,EAAmB3B,EAAS4B,OAAO,SAAAnC,GAAa,OAAOA,EAAQI,KAAKgC,cAAcC,SAASnB,EAAYkB,iBAC7G,OACE,yBAAKtC,UAAU,OACb,gDACA,kBAAC,EAAD,CAAWa,YAAc,kBAAoBC,gBAAkB,SAAAG,GAAC,OAAI,EAAKI,aAAaJ,MAEtF,kBAAC,EAAD,CAAUR,SAAW2B,S,GAvBXI,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC,iB","file":"static/js/main.09032db4.chunk.js","sourcesContent":["import React from 'react'\n\n// Styles\nimport './card.styles.css'\n\nconst Card = props => {\n  return (\n    <div className='card-container'>\n      <img\n        src={`https://robohash.org/${props.monster.id}?set=set2`}\n        alt='monster'\n        srcSet={`https://robohash.org/${props.monster.id}?set=set2`}\n      />\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div>\n  )\n}\n\nexport default Card\n","import React from 'react'\n\n// Components\nimport Card from '../card/card.component'\n\n// Styles\nimport './card-list.styles.css'\n\nconst CardList = props => {\n  return (\n    <div className='card-list'>\n      {props.monsters.map(monster => (\n        <Card monster={monster} key={monster.id} />\n      ))}\n    </div>\n  )\n}\n\nexport default CardList\n","import React from 'react'\n\n// Styles\nimport './search-box.styles.css'\n\nconst SearchBox = ({ placeholder, onChangeHandler }) => {\n  return (\n    <input\n      className='search'\n      type='search'\n      placeholder={placeholder}\n      onChange={e => onChangeHandler(e)}\n    />\n  )\n}\n\nexport default SearchBox\n","import React, { Component } from 'react';\n\n// Styles\nimport \"./App.css\";\n\n// Components\nimport CardList from \"./components/card-list/card-list.component\";\nimport SearchBox from './components/search-box/search-box.component';\n\nclass App extends Component {\n  state = {\n    monsters: [],\n    searchField: ''\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => {\n      return response.json()\n      // this.setState({ monsters: monsters.body })\n    }).then(users => this.setState({ monsters: users })).catch(error => { console.log(error.message) });\n  }\n\n  handleChange = (e) => { this.setState({ searchField: e.target.value }); }\n\n  render() {\n    const { monsters, searchField } = this.state\n    const filteredMonsters = monsters.filter(monster => { return monster.name.toLowerCase().includes(searchField.toLowerCase()) })\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder={ 'Search monsters' } onChangeHandler={ e => this.handleChange(e) } />\n        {/* <input type=\"search\" onChange={} /> */ }\n        <CardList monsters={ filteredMonsters } />\n      </div>\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}